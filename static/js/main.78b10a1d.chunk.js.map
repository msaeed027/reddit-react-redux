{"version":3,"sources":["redux/actions/index.js","redux/reducers/index.js","Components/picker/Picker.js","Components/posts/Posts.js","Components/App.js","index.js"],"names":["selectSubreddit","subreddit","type","invalidateSubreddit","fetchPosts","dispatch","requestPosts","fetch","concat","then","res","json","err","console","error","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","Promise","resolve","combineReducers","selectedSubreddit","arguments","length","undefined","action","Object","assign","defineProperty","items","lastUpdated","Picker","_ref","value","options","onChange","react_default","a","createElement","Fragment","e","target","option","key","Posts","post","id","title","App","_this","props","handleRefreshClick","_this$props","_this$props2","this","prevProps","_this$props3","_this$props4","isEmpty","toLocaleTimeString","onClick","React","Component","prepareSubredditPosts","subredditPosts","connect","objectSpread","store","createStore","reducer","applyMiddleware","thunkMiddleware","ReactDOM","render","es","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.78b10a1d.chunk.js","sourcesContent":["import fetch from \"cross-fetch\";\r\n\r\nexport const SELECT_SUBREDDIT = \"SELECT_SUBREDDIT\";\r\nexport const INVALIDATE_SUBREDDIT = \"INVALIDATE_SUBREDDIT\";\r\nexport const REQUEST_POSTS = \"REQUEST_POSTS\";\r\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\r\n\r\nexport const selectSubreddit = subreddit => ({\r\n  type: SELECT_SUBREDDIT,\r\n  subreddit\r\n});\r\n\r\nexport const invalidateSubreddit = subreddit => ({\r\n  type: INVALIDATE_SUBREDDIT,\r\n  subreddit\r\n});\r\n\r\nexport const requestPosts = subreddit => ({\r\n  type: REQUEST_POSTS,\r\n  subreddit\r\n});\r\n\r\nexport const receivePosts = (subreddit, json) => ({\r\n  type: RECEIVE_POSTS,\r\n  subreddit,\r\n  posts: json.data.children.map(child => child.data),\r\n  receivedAt: Date.now()\r\n});\r\n\r\nexport const fetchPosts = subreddit => dispatch => {\r\n  dispatch(requestPosts(subreddit));\r\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\r\n    .then(res => res.json(), err => console.error(err))\r\n    .then(json => dispatch(receivePosts(subreddit, json)));\r\n};\r\n\r\nexport const shouldFetchPosts = (state, subreddit) => {\r\n  const posts = state.postsBySubreddit[subreddit];\r\n  if (!posts) {\r\n    return true;\r\n  } else if (posts.isFetching) {\r\n    return false;\r\n  } else {\r\n    return posts.didInvalidate;\r\n  }\r\n};\r\n\r\nexport const fetchPostsIfNeeded = subreddit => (dispatch, getState) => {\r\n  if (shouldFetchPosts(getState(), subreddit)) {\r\n    return dispatch(fetchPosts(subreddit));\r\n  } else {\r\n    return Promise.resolve();\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport {\r\n  SELECT_SUBREDDIT,\r\n  INVALIDATE_SUBREDDIT,\r\n  REQUEST_POSTS,\r\n  RECEIVE_POSTS\r\n} from \"../actions\";\r\n\r\nconst selectedSubreddit = (state = \"reactjs\", action) => {\r\n  switch (action.type) {\r\n    case SELECT_SUBREDDIT:\r\n      return action.subreddit;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst posts = (\r\n  state = {\r\n    isFetching: false,\r\n    didInvalidate: false,\r\n    items: []\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n      return Object.assign({}, state, {\r\n        didInvalidate: true\r\n      });\r\n    case REQUEST_POSTS:\r\n      return Object.assign({}, state, {\r\n        isFetching: true,\r\n        didInvalidate: false\r\n      });\r\n    case RECEIVE_POSTS:\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        items: action.posts,\r\n        lastUpdated: action.receivedAt\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst postsBySubreddit = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n    case RECEIVE_POSTS:\r\n    case REQUEST_POSTS:\r\n      return Object.assign({}, state, {\r\n        [action.subreddit]: posts(state[action.subreddit], action)\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  selectedSubreddit,\r\n  postsBySubreddit\r\n});\r\n","import React from \"react\";\r\n\r\nexport default function Picker({ value, options, onChange }) {\r\n  return (\r\n    <>\r\n      <h1>{value}</h1>\r\n      <select value={value} onChange={e => onChange(e.target.value)}>\r\n        {options.map(option => (\r\n          <option value={option} key={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Posts({ posts }) {\r\n  return (\r\n    <ul>\r\n      {posts.map(post => (\r\n        <li key={post.id}>{post.title}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Picker from \"./picker/Picker\";\r\nimport Posts from \"./posts/Posts\";\r\nimport {\r\n  fetchPostsIfNeeded,\r\n  selectSubreddit,\r\n  invalidateSubreddit\r\n} from \"../redux/actions\";\r\n\r\nclass App extends React.Component {\r\n  options = [\"reactjs\", \"backend\"];\r\n\r\n  componentDidMount() {\r\n    const { dispatch, selectedSubreddit } = this.props;\r\n    dispatch(fetchPostsIfNeeded(selectedSubreddit));\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\r\n    const { dispatch, selectedSubreddit } = this.props;\r\n    dispatch(fetchPostsIfNeeded(selectedSubreddit));\r\n    // }\r\n  }\r\n\r\n  onChange = subreddit => {\r\n    this.props.dispatch(selectSubreddit(subreddit));\r\n  };\r\n\r\n  handleRefreshClick = () => {\r\n    const { dispatch, selectedSubreddit } = this.props;\r\n    dispatch(invalidateSubreddit(selectedSubreddit));\r\n    // dispatch(fetchPostsIfNeeded(selectedSubreddit));\r\n  };\r\n\r\n  render() {\r\n    const { items, isFetching, selectedSubreddit, lastUpdated } = this.props;\r\n    const isEmpty = items.length === 0;\r\n    return (\r\n      <>\r\n        <Picker\r\n          value={selectedSubreddit}\r\n          options={this.options}\r\n          onChange={this.onChange}\r\n        />\r\n        <p>\r\n          {lastUpdated && (\r\n            <span>\r\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{\" \"}\r\n            </span>\r\n          )}\r\n          {!isFetching && (\r\n            <button onClick={this.handleRefreshClick}>Refresh</button>\r\n          )}\r\n        </p>\r\n        {isEmpty ? (\r\n          isFetching ? (\r\n            <h2>Loading...</h2>\r\n          ) : (\r\n            <h2>Empty</h2>\r\n          )\r\n        ) : (\r\n          <Posts posts={items} />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedSubreddit: state.selectedSubreddit,\r\n  ...prepareSubredditPosts(state.postsBySubreddit[state.selectedSubreddit])\r\n});\r\n\r\nconst prepareSubredditPosts = subredditPosts =>\r\n  subredditPosts ? subredditPosts : { isFetching: true, items: [] };\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  dispatch\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import \"babel-polyfill\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./redux/reducers\";\nimport App from \"./Components/App\";\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}